# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__7conxYqHWejRO1ahN1ChZEeijoybBI
"""

from keras.datasets import mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

from keras.models import Sequential
from keras.layers import Conv2D, Dense, Flatten,BatchNormalization, Dropout,MaxPooling2D

x_train = x_train.reshape(-1,28,28,1)/255
x_test = x_test.reshape(-1,28,28,1)/255

model = Sequential()
model.add(Conv2D(32,(3,3),input_shape = (28,28,1),kernel_regularizer='l2',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(32,(3,3),kernel_regularizer='l2',padding='same'))
model.add(MaxPooling2D((2,2),padding='same'))

model.add(Conv2D(32,(3,3),kernel_regularizer='l2',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(32,(3,3),kernel_regularizer='l2',padding='same'))
model.add(MaxPooling2D((2,2),padding='same'))

model.add(Conv2D(32,(3,3),kernel_regularizer='l2',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(32,(3,3),kernel_regularizer='l2',padding='same'))


model.add(Flatten())
model.add(Dense(32, activation = 'relu'))
model.add(Dropout(0.3))
model.add(Dense(32, activation = 'relu'))
model.add(Dropout(0.3))
model.add(Dense(16, activation = 'relu'))
model.add(Dense(1))

model.summary()

model.compile(optimizer = 'adam', loss = 'mse')
model.fit(x_train, y_train, batch_size = 32, epochs=50, validation_split=0.2)

y_pre = model.predict(x_test).reshape(-1)

def score(y_pre, y_test):
  right = 0
  wrong = 0
  for index, y in enumerate(y_test):
    if y == round(y_pre[index]):
      right +=1
    else:
      wrong +=1
  return right / (right+wrong) *100

score(y_pre,y_test)

# 86.76





x_train = x_train.reshape(-1,784)
x_test = x_test.reshape(-1,784)

model1 = Sequential()
model1.add(Dense(512,input_dim=784, activation = 'relu'))
model1.add(Dense(256,activation = 'relu'))
model1.add(Dense(128,activation = 'relu'))
model1.add(Dense(1))

model1.summary()

model1.compile(optimizer='adam', loss='mse')
model1.fit(x_train, y_train, batch_size=32, epochs=15)

y_pre = model1.predict(x_test).reshape(-1)

score(y_pre, y_test)

# 95.57