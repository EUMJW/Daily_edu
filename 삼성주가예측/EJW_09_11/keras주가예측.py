# -*- coding: utf-8 -*-
"""주가예측.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUquEWEUavFmpQz_ABdSZEWXaCfa04YU
"""

from google.colab import files
files.upload()

import pandas as pd
import numpy as np



data = pd.read_csv('삼성0910.csv')

data.iloc[-1:]

data.iloc[:,[1,2,3,4,6]].isnull().sum()

label = data.iloc[:,[4]]

x_data = data.iloc[:,[1,2,3,4,6]]



label.shape

x_data.shape

x_data = np.array(x_data[::-1])
label = np.array(label[::-1])

label = label.reshape(-1)
print(label.shape)

for i in x_data:
  for j in range(5):
    i[j]=int(i[j].replace(',',''))

print(x_data[0:5],'\n',x_data[-5:])
for i in range(len(label)):
  label[i]=int(label[i].replace(',',''))

print('\n',label[0:5], label[-5:])

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler()
x_data = sc.fit_transform(x_data)

label = label/10000

x_data[0:5]

x_train_dataset = x_data[:]
x_test_dataset = x_data[-100:]
y_train_dataset = label[:]
y_test_dataset = label[-100:]

print(x_train_dataset.shape, x_test_dataset.shape, y_train_dataset.shape, y_test_dataset.shape)

print(y_test_dataset)

def slice_dataset(x,y,predict_date=4,period=20):
  x_return = []
  y_return = []
  x_last = []
  for i in range(len(x)-predict_date-period+1):
    x_return.append(x[i:i+period])
    y_return.append(y[i+period:i+period+predict_date])
  for i in range(len(x)-period+1):
    x_last.append(x[i:i+period])

  return np.array(x_return, dtype='f8'), np.array(y_return, dtype='f8'), np.array(x_last, dtype='f8')

def sd(x,y,period):
  x_return = []
  y_return = []
  x_last = []
  for i in range(len(x)-period):
    x_return.append(x[i:i+period])
    y_return.append(y[i+period])
  for i in range(len(x)-period+1):
    x_last.append(x[i:i+period])

  return np.array(x_return), np.array(y_return), np.array(x_last)

predict_date = 4
period = 20

x_train, y_train,_ = slice_dataset(x_train_dataset, y_train_dataset,4,20)

x_test, y_test, x_last = slice_dataset(x_test_dataset, y_test_dataset,4,20)

# x_train, y_train,_ = sd(x_train_dataset, y_train_dataset,30)

# x_test, y_test, x_last = sd(x_test_dataset, y_test_dataset, 30)



print(x_train.shape,y_train.shape, x_test.shape, y_test.shape, x_last.shape)

print(x_test)

from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

model = Sequential()
model.add(LSTM(64,input_shape=(20,5), return_sequences=True))
model.add(LSTM(64))
model.add(Dropout(0.2))
model.add(Dense(32,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(4))

model.summary()

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=100)
mc = ModelCheckpoint('./best_model.h5', monitor='val_loss', mode='min',verbose=1, save_best_only=True)


model.compile(loss='mse',optimizer='adam')

model.fit(x_train, y_train, batch_size=10, epochs=500, validation_data=(x_test, y_test) , callbacks=[es, mc])


model.load_weights('best_model.h5')

pre = model.predict(x_test)
print('                  0     +1    +2     +3                        0        +1         +2        +3')
print('--------------------------------------------------------------------------------------------------------------------------')
for i in range(len(pre)):
  print(f'{i}일 | 실제값 : {y_test[i]}만원  |  예측값 : {pre[i]}만원 |    차이 : {pre[i]-y_test[i]}만원')

import matplotlib.pyplot as plt

fig = plt.figure(facecolor='white', figsize=(20, 8))
ax = fig.add_subplot(111)
ax.plot(y_test[:,3], label='Real')
ax.plot(pre[:,3], label='Predict')
ax.legend()
plt.show()

print(f'종가 예측 : {model.predict(x_last)[-1]} 만원')





















