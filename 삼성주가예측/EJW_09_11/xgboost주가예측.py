# -*- coding: utf-8 -*-
"""xgboost주가예측.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1W4xgbr-OpzZJek_DzOO85lES-K8ceO
"""

from google.colab import files
files.upload()

import pandas as pd
import numpy as np

data = pd.read_csv('삼성0910.csv')

# x_data = data.iloc[:,[1,2,3,4,6]]
label = data.iloc[:,[4]]
# x_data = np.array(x_data[::-1])
label = np.array(label[::-1])
label = label.reshape(-1)

# for i in x_data:
#   for j in range(5):
#     i[j]=int(i[j].replace(',',''))

for i in range(len(label)):
  label[i]=int(label[i].replace(',',''))

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
# x_data = sc.fit_transform(x_data)
label = label/10000

x_train_dataset = label[:]
x_test_dataset = label[-100:]
y_train_dataset = label[:]
y_test_dataset = label[-100:]

def slice_dataset(x,y,predict_date=4,period=20):
  x_return = []
  y_return = []
  x_last = []
  for i in range(len(x)-predict_date-period+1):
    x_return.append(x[i:i+period])
    y_return.append(y[i+period:i+period+predict_date])
  for i in range(len(x)-period+1):
    x_last.append(x[i:i+period])

  return np.array(x_return, dtype='f8'), np.array(y_return, dtype='f8'), np.array(x_last, dtype='f8')

predict_date = 4
period = 20

x_train, y_train,_ = slice_dataset(x_train_dataset, y_train_dataset,4,20)

x_test, y_test, x_last = slice_dataset(x_test_dataset, y_test_dataset,4,20)

# x_train, y_train,_ = sd(x_train_dataset, y_train_dataset,30)

# x_test, y_test, x_last = sd(x_test_dataset, y_test_dataset, 30)



print(x_train.shape,y_train.shape, x_test.shape, y_test.shape, x_last.shape)





from xgboost import XGBRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.model_selection import RandomizedSearchCV

parameters ={
    'estimator__max_depth': [4, 8, 12, 16, 24],
    'estimator__learning_rate': [0.1, 0.05, 0.01],
    'estimator__n_estimators' : [100, 200, 500, 800, 1000, 1500, 2000],
    'estimator__colsample_bytree' :[0, 0.25, 0.5, 0.75, 1],
    'estimator__colsample_bylevel' :[0, 0.25, 0.5, 0.75, 1],
    'n_jobs' : [-1]
}

model = RandomizedSearchCV(MultiOutputRegressor(XGBRegressor(booster='gblinear')),param_distributions=parameters, n_iter=100).fit(X=x_train, y=y_train)

model.get_params().keys()

print(f'best param : {model.best_estimator_}')

score = model.score(x_test, y_test)
print(score)

model.predict(x_last)[-1]

